# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/turnip/all/turnip.rbi
#
# turnip-4.4.0

module Turnip
  def self.type; end
  def self.type=(arg0); end
end
module Turnip::DSL
  def placeholder(*name, &block); end
  def step(description, &block); end
  def steps_for(tag, &block); end
end
module Turnip::Execute
  def step(step_or_description, *extra_args); end
end
module Turnip::Define
  def step(method_name = nil, expression, &block); end
end
module Turnip::Node
end
class Turnip::Node::Location
  def column; end
  def initialize(line, column); end
  def line; end
end
module Turnip::Node::HasLocation
  def line; end
  def location; end
end
class Turnip::Node::Base
  def initialize(raw); end
  def raw; end
  include Turnip::Node::HasLocation
end
class Turnip::Node::Tag < Turnip::Node::Base
  def name; end
end
module Turnip::Node::HasTags
  def metadata_hash; end
  def tag_names; end
  def tags; end
end
class Turnip::Table
  def each; end
  def hashes; end
  def headers; end
  def initialize(raw); end
  def map_column!(name, strict = nil); end
  def raw; end
  def rows; end
  def rows_hash; end
  def to_a; end
  def transpose; end
  def width; end
  include Enumerable
end
class Turnip::Table::WidthMismatch < StandardError
  def initialize(expected, actual); end
end
class Turnip::Table::ColumnNotExist < StandardError
  def initialize(column_name); end
end
class Turnip::Node::Step < Turnip::Node::Base
  def argument; end
  def data_table(table); end
  def description; end
  def doc_string(doc); end
  def keyword; end
  def text; end
  def to_s; end
end
class Turnip::Node::ScenarioDefinition < Turnip::Node::Base
  def description; end
  def keyword; end
  def name; end
  def steps; end
end
class Turnip::Node::Scenario < Turnip::Node::ScenarioDefinition
  include Turnip::Node::HasTags
end
class Turnip::Node::Example < Turnip::Node::Base
  def description; end
  def header; end
  def keyword; end
  def name; end
  def rows; end
  include Turnip::Node::HasTags
end
class Turnip::Node::ScenarioOutline < Turnip::Node::ScenarioDefinition
  def convert_metadata_to_scenario(header, row); end
  def examples; end
  def substitute(text, header, row); end
  def to_scenarios; end
  include Turnip::Node::HasTags
end
class Turnip::Node::Background < Turnip::Node::ScenarioDefinition
end
class Turnip::Node::ScenarioGroupDefinition < Turnip::Node::Base
  def backgrounds; end
  def description; end
  def keyword; end
  def name; end
  def scenarios; end
end
class Turnip::Node::Rule < Turnip::Node::ScenarioGroupDefinition
  def children; end
end
class Turnip::Node::Feature < Turnip::Node::ScenarioGroupDefinition
  def children; end
  def language; end
  def metadata_hash; end
  def rules; end
  include Turnip::Node::HasTags
end
class Turnip::Builder
  def self.build(feature_file); end
end
class Turnip::StepDefinition
  def block; end
  def called_from; end
  def compile_regexp; end
  def expression; end
  def initialize(expression, method_name = nil, called_from = nil, &block); end
  def match(description); end
  def method_name; end
  def regexp; end
end
class Anonymous_Struct_25 < Struct
  def block; end
  def block=(_); end
  def params; end
  def params=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.keyword_init?; end
  def self.members; end
  def self.new(*arg0); end
  def step_definition; end
  def step_definition=(_); end
end
class Turnip::StepDefinition::Match < Anonymous_Struct_25
  def called_from; end
  def expression; end
  def method_name; end
  def trace; end
end
class Turnip::Placeholder
  def apply(value); end
  def default(&block); end
  def find_match(value); end
  def initialize(name, &block); end
  def match(regexp, &block); end
  def placeholder_matches; end
  def regexp; end
  def self.add(name, &block); end
  def self.apply(name, value); end
  def self.default; end
  def self.find(name); end
  def self.placeholders; end
  def self.resolve(name); end
end
class Anonymous_Struct_26 < Struct
  def block; end
  def block=(_); end
  def regexp; end
  def regexp=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.keyword_init?; end
  def self.members; end
  def self.new(*arg0); end
end
class Turnip::Placeholder::Match < Anonymous_Struct_26
end
class Turnip::Pending < StandardError
end
class Turnip::Ambiguous < StandardError
end
module Turnip::Steps
end
class Module
  include Turnip::Define
end
