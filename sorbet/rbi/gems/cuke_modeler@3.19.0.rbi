# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `cuke_modeler` gem.
# Please instead update this file by running `bin/tapioca gem cuke_modeler`.

# The top level namespace used by this gem
#
# source://cuke_modeler//lib/cuke_modeler.rb#2
module CukeModeler; end

# A class modeling a feature's background.
#
# source://cuke_modeler//lib/cuke_modeler/models/background.rb#4
class CukeModeler::Background < ::CukeModeler::Model
  include ::CukeModeler::Parsing
  include ::CukeModeler::Parsed
  include ::CukeModeler::Named
  include ::CukeModeler::Described
  include ::CukeModeler::Stepped
  include ::CukeModeler::Sourceable

  # Creates a new Background object and, if *source_text* is provided, populates
  # the object.
  #
  # @return [Background] a new instance of Background
  #
  # source://cuke_modeler//lib/cuke_modeler/models/background.rb#20
  def initialize(source_text = T.unsafe(nil)); end

  # Returns *true* if the two models have equivalent steps and *false* otherwise.
  #
  # source://cuke_modeler//lib/cuke_modeler/models/background.rb#32
  def ==(other); end

  # Returns the model objects that belong to this model.
  #
  # source://cuke_modeler//lib/cuke_modeler/models/background.rb#39
  def children; end

  # The background's keyword
  #
  # source://cuke_modeler//lib/cuke_modeler/models/background.rb#15
  def keyword; end

  # The background's keyword
  #
  # source://cuke_modeler//lib/cuke_modeler/models/background.rb#15
  def keyword=(_arg0); end

  # Returns a string representation of this model. For a background model,
  # this will be Gherkin text that is equivalent to the background being modeled.
  #
  # source://cuke_modeler//lib/cuke_modeler/models/background.rb#45
  def to_s; end

  private

  # source://cuke_modeler//lib/cuke_modeler/models/background.rb#60
  def parse_source(source_text); end
end

# A class modeling a single cell of a row.
#
# source://cuke_modeler//lib/cuke_modeler/models/cell.rb#4
class CukeModeler::Cell < ::CukeModeler::Model
  include ::CukeModeler::Sourceable
  include ::CukeModeler::Parsing
  include ::CukeModeler::Parsed

  # Creates a new Cell object and, if *source_text* is provided, populates
  # the object.
  #
  # @return [Cell] a new instance of Cell
  #
  # source://cuke_modeler//lib/cuke_modeler/models/cell.rb#17
  def initialize(source_text = T.unsafe(nil)); end

  # Returns a string representation of this model. For a cell model,
  # this will be Gherkin text that is equivalent to the cell being modeled.
  #
  # source://cuke_modeler//lib/cuke_modeler/models/cell.rb#28
  def to_s; end

  # The value of the cell
  #
  # source://cuke_modeler//lib/cuke_modeler/models/cell.rb#12
  def value; end

  # The value of the cell
  #
  # source://cuke_modeler//lib/cuke_modeler/models/cell.rb#12
  def value=(_arg0); end

  private

  # source://cuke_modeler//lib/cuke_modeler/models/cell.rb#37
  def parse_source(source_text); end
end

# A class modeling a comment in a feature file.
#
# source://cuke_modeler//lib/cuke_modeler/models/comment.rb#4
class CukeModeler::Comment < ::CukeModeler::Model
  include ::CukeModeler::Parsing
  include ::CukeModeler::Parsed
  include ::CukeModeler::Sourceable

  # Creates a new Comment object and, if *source_text* is provided, populates the
  # object.
  #
  # @return [Comment] a new instance of Comment
  #
  # source://cuke_modeler//lib/cuke_modeler/models/comment.rb#17
  def initialize(source_text = T.unsafe(nil)); end

  # The text of the comment
  #
  # source://cuke_modeler//lib/cuke_modeler/models/comment.rb#12
  def text; end

  # The text of the comment
  #
  # source://cuke_modeler//lib/cuke_modeler/models/comment.rb#12
  def text=(_arg0); end

  # Returns a string representation of this model. For a comment model,
  # this will be Gherkin text that is equivalent to the comment being modeled.
  #
  # source://cuke_modeler//lib/cuke_modeler/models/comment.rb#28
  def to_s; end

  private

  # source://cuke_modeler//lib/cuke_modeler/models/comment.rb#36
  def parse_source(source_text); end
end

# NOT A PART OF THE PUBLIC API
# A mix-in module containing methods used by models that contain other models.
#
# source://cuke_modeler//lib/cuke_modeler/containing.rb#8
module CukeModeler::Containing
  include ::Enumerable

  # Executes the given code block with this model and every model that is a child of this model. Exact
  # order of model tree traversal is not guaranteed beyond the first model traversed, which will be the
  # model that called this method. If no block is provided, an `Enumerator` is returned instead.
  #
  # source://cuke_modeler//lib/cuke_modeler/containing.rb#15
  def each(&block); end

  # Executes the given code block with every model that is a child of this model.
  # DEPRECATED: use `Enumerable` module methods instead
  #
  # source://cuke_modeler//lib/cuke_modeler/containing.rb#26
  def each_descendant(&block); end

  # Executes the given code block with this model and every model that is a child of this model.
  # DEPRECATED: use `Enumerable` module methods instead
  #
  # source://cuke_modeler//lib/cuke_modeler/containing.rb#35
  def each_model(&block); end

  private

  # source://cuke_modeler//lib/cuke_modeler/containing.rb#45
  def build_child_model(clazz, model_data); end

  # source://cuke_modeler//lib/cuke_modeler/containing.rb#77
  def populate_background(background_object, parsed_background_data); end

  # source://cuke_modeler//lib/cuke_modeler/containing.rb#94
  def populate_block(step_object, parsed_step_data); end

  # source://cuke_modeler//lib/cuke_modeler/containing.rb#108
  def populate_cell(cell_object, parsed_cell_data); end

  # source://cuke_modeler//lib/cuke_modeler/containing.rb#223
  def populate_cell_value(cell_model, parsed_cell_data); end

  # It's not getting better any time soon
  #
  # source://cuke_modeler//lib/cuke_modeler/containing.rb#250
  def populate_children(model, parsed_feature_data); end

  # source://cuke_modeler//lib/cuke_modeler/containing.rb#189
  def populate_comment(comment_object, processed_comment_data); end

  # source://cuke_modeler//lib/cuke_modeler/containing.rb#199
  def populate_comment_text(comment_model, parsed_comment_data); end

  # source://cuke_modeler//lib/cuke_modeler/containing.rb#231
  def populate_content(doc_string_model, parsed_doc_string_data); end

  # source://cuke_modeler//lib/cuke_modeler/containing.rb#227
  def populate_content_type(doc_string_model, parsed_doc_string_data); end

  # source://cuke_modeler//lib/cuke_modeler/containing.rb#158
  def populate_directory(directory_object, processed_directory_data); end

  # source://cuke_modeler//lib/cuke_modeler/containing.rb#114
  def populate_docstring(doc_string_object, parsed_doc_string_data); end

  # source://cuke_modeler//lib/cuke_modeler/containing.rb#121
  def populate_example(example_object, parsed_example_data); end

  # source://cuke_modeler//lib/cuke_modeler/containing.rb#241
  def populate_example_rows(example_model, parsed_example_data); end

  # source://cuke_modeler//lib/cuke_modeler/containing.rb#137
  def populate_feature(feature_object, parsed_feature_data); end

  # source://cuke_modeler//lib/cuke_modeler/containing.rb#170
  def populate_featurefile(feature_file_object, processed_feature_file_data); end

  # source://cuke_modeler//lib/cuke_modeler/containing.rb#207
  def populate_keyword(model, parsed_model_data); end

  # source://cuke_modeler//lib/cuke_modeler/containing.rb#195
  def populate_language(feature_model, parsed_feature_data); end

  # source://cuke_modeler//lib/cuke_modeler/containing.rb#66
  def populate_outline(outline_object, parsed_outline_data); end

  # source://cuke_modeler//lib/cuke_modeler/containing.rb#235
  def populate_outline_examples(outline_model, parsed_examples); end

  # source://cuke_modeler//lib/cuke_modeler/containing.rb#131
  def populate_row(row_object, parsed_row_data); end

  # source://cuke_modeler//lib/cuke_modeler/containing.rb#217
  def populate_row_cells(row_model, parsed_row_data); end

  # source://cuke_modeler//lib/cuke_modeler/containing.rb#211
  def populate_row_models(table_model, parsed_table_data); end

  # source://cuke_modeler//lib/cuke_modeler/containing.rb#148
  def populate_rule(rule_object, parsed_rule_data); end

  # source://cuke_modeler//lib/cuke_modeler/containing.rb#56
  def populate_scenario(scenario_object, parsed_scenario_data); end

  # source://cuke_modeler//lib/cuke_modeler/containing.rb#86
  def populate_step(step_object, parsed_step_data); end

  # source://cuke_modeler//lib/cuke_modeler/containing.rb#102
  def populate_table(table_object, parsed_table_data); end

  # source://cuke_modeler//lib/cuke_modeler/containing.rb#183
  def populate_tag(tag_object, processed_tag_data); end

  # source://cuke_modeler//lib/cuke_modeler/containing.rb#203
  def populate_text(step_model, parsed_step_data); end
end

# NOT A PART OF THE PUBLIC API
# A mix-in module containing methods used by models that represent an element that has a description.
#
# source://cuke_modeler//lib/cuke_modeler/described.rb#5
module CukeModeler::Described
  # The description of the element
  #
  # source://cuke_modeler//lib/cuke_modeler/described.rb#8
  def description; end

  # The description of the element
  #
  # source://cuke_modeler//lib/cuke_modeler/described.rb#8
  def description=(_arg0); end

  private

  # source://cuke_modeler//lib/cuke_modeler/described.rb#14
  def description_output_string; end

  # @return [Boolean]
  #
  # source://cuke_modeler//lib/cuke_modeler/described.rb#27
  def no_description_to_output?; end

  # source://cuke_modeler//lib/cuke_modeler/described.rb#31
  def populate_description(model, parsed_model_data); end

  # source://cuke_modeler//lib/cuke_modeler/described.rb#46
  def trim_leading_blank_lines(description); end

  # source://cuke_modeler//lib/cuke_modeler/described.rb#54
  def trim_leading_spaces(description); end

  # source://cuke_modeler//lib/cuke_modeler/described.rb#50
  def trim_trailing_blank_lines(_description); end

  # source://cuke_modeler//lib/cuke_modeler/described.rb#62
  def trim_trailing_spaces(description); end

  # source://cuke_modeler//lib/cuke_modeler/described.rb#35
  def trimmed_description(description); end
end

# A class modeling a directory in a Cucumber suite.
#
# source://cuke_modeler//lib/cuke_modeler/models/directory.rb#4
class CukeModeler::Directory < ::CukeModeler::Model
  # Creates a new Directory object and, if *directory_path* is provided,
  # populates the object.
  #
  # @raise [ArgumentError]
  # @return [Directory] a new instance of Directory
  #
  # source://cuke_modeler//lib/cuke_modeler/models/directory.rb#19
  def initialize(directory_path = T.unsafe(nil)); end

  # Returns the model objects that belong to this model.
  #
  # source://cuke_modeler//lib/cuke_modeler/models/directory.rb#39
  def children; end

  # The directory models contained by the modeled directory
  #
  # source://cuke_modeler//lib/cuke_modeler/models/directory.rb#11
  def directories; end

  # The directory models contained by the modeled directory
  #
  # source://cuke_modeler//lib/cuke_modeler/models/directory.rb#11
  def directories=(_arg0); end

  # The feature file models contained by the modeled directory
  #
  # source://cuke_modeler//lib/cuke_modeler/models/directory.rb#8
  def feature_files; end

  # The feature file models contained by the modeled directory
  #
  # source://cuke_modeler//lib/cuke_modeler/models/directory.rb#8
  def feature_files=(_arg0); end

  # Returns the name of the modeled directory.
  #
  # source://cuke_modeler//lib/cuke_modeler/models/directory.rb#34
  def name; end

  # The file path of the modeled directory
  #
  # source://cuke_modeler//lib/cuke_modeler/models/directory.rb#14
  def path; end

  # The file path of the modeled directory
  #
  # source://cuke_modeler//lib/cuke_modeler/models/directory.rb#14
  def path=(_arg0); end

  # Returns a string representation of this model. For a directory
  # model, this will be the path of the modeled directory.
  #
  # source://cuke_modeler//lib/cuke_modeler/models/directory.rb#45
  def to_s; end

  private

  # source://cuke_modeler//lib/cuke_modeler/models/directory.rb#53
  def process_directory(directory_path); end

  # source://cuke_modeler//lib/cuke_modeler/models/directory.rb#77
  def process_feature_file(file_path); end
end

# A class modeling a step's doc string.
#
# source://cuke_modeler//lib/cuke_modeler/models/doc_string.rb#4
class CukeModeler::DocString < ::CukeModeler::Model
  include ::CukeModeler::Parsing
  include ::CukeModeler::Parsed
  include ::CukeModeler::Sourceable

  # Creates a new DocString object and, if *source_text* is provided, populates
  # the object.
  #
  # @return [DocString] a new instance of DocString
  #
  # source://cuke_modeler//lib/cuke_modeler/models/doc_string.rb#20
  def initialize(source_text = T.unsafe(nil)); end

  # The content of the doc string
  #
  # source://cuke_modeler//lib/cuke_modeler/models/doc_string.rb#15
  def content; end

  # The content of the doc string
  #
  # source://cuke_modeler//lib/cuke_modeler/models/doc_string.rb#15
  def content=(_arg0); end

  # The content type associated with the doc string
  #
  # source://cuke_modeler//lib/cuke_modeler/models/doc_string.rb#12
  def content_type; end

  # The content type associated with the doc string
  #
  # source://cuke_modeler//lib/cuke_modeler/models/doc_string.rb#12
  def content_type=(_arg0); end

  # Returns a string representation of this model. For a doc string model,
  # this will be Gherkin text that is equivalent to the doc string being modeled.
  #
  # source://cuke_modeler//lib/cuke_modeler/models/doc_string.rb#31
  def to_s; end

  private

  # source://cuke_modeler//lib/cuke_modeler/models/doc_string.rb#57
  def content_output_string; end

  # source://cuke_modeler//lib/cuke_modeler/models/doc_string.rb#53
  def content_type_output_string; end

  # source://cuke_modeler//lib/cuke_modeler/models/doc_string.rb#41
  def parse_source(source_text); end
end

# A class modeling an example table of an outline.
#
# source://cuke_modeler//lib/cuke_modeler/models/example.rb#7
class CukeModeler::Example < ::CukeModeler::Model
  include ::CukeModeler::Parsing
  include ::CukeModeler::Parsed
  include ::CukeModeler::Named
  include ::CukeModeler::Described
  include ::CukeModeler::Sourceable
  include ::CukeModeler::Taggable

  # Creates a new Example object and, if *source_text* is provided,
  # populates the object.
  #
  # @return [Example] a new instance of Example
  #
  # source://cuke_modeler//lib/cuke_modeler/models/example.rb#26
  def initialize(source_text = T.unsafe(nil)); end

  # Adds a row to the example table. The row can be given as a Hash of
  # parameters and their corresponding values or as an Array of values which
  # will be assigned in order.
  #
  # source://cuke_modeler//lib/cuke_modeler/models/example.rb#41
  def add_row(row); end

  # The argument rows in the example table
  #
  # source://cuke_modeler//lib/cuke_modeler/models/example.rb#82
  def argument_rows; end

  # Returns the model objects that belong to this model.
  #
  # source://cuke_modeler//lib/cuke_modeler/models/example.rb#97
  def children; end

  # The example's keyword
  #
  # source://cuke_modeler//lib/cuke_modeler/models/example.rb#18
  def keyword; end

  # The example's keyword
  #
  # source://cuke_modeler//lib/cuke_modeler/models/example.rb#18
  def keyword=(_arg0); end

  # The parameter row for the example table
  #
  # source://cuke_modeler//lib/cuke_modeler/models/example.rb#87
  def parameter_row; end

  # Returns the parameters of the example table
  #
  # source://cuke_modeler//lib/cuke_modeler/models/example.rb#92
  def parameters; end

  # Removes a row from the example table. The row can be given as a Hash of
  # parameters and their corresponding values or as an Array of values
  # which will be assigned in order.
  #
  # source://cuke_modeler//lib/cuke_modeler/models/example.rb#64
  def remove_row(row_removed); end

  # The row models in the example table
  #
  # source://cuke_modeler//lib/cuke_modeler/models/example.rb#21
  def rows; end

  # The row models in the example table
  #
  # source://cuke_modeler//lib/cuke_modeler/models/example.rb#21
  def rows=(_arg0); end

  # Returns a string representation of this model. For an example model,
  # this will be Gherkin text that is equivalent to the example being modeled.
  #
  # source://cuke_modeler//lib/cuke_modeler/models/example.rb#106
  def to_s; end

  private

  # source://cuke_modeler//lib/cuke_modeler/models/example.rb#137
  def determine_buffer_size(index); end

  # source://cuke_modeler//lib/cuke_modeler/models/example.rb#181
  def index_for_values(values); end

  # source://cuke_modeler//lib/cuke_modeler/models/example.rb#173
  def ordered_row_values(row_hash); end

  # source://cuke_modeler//lib/cuke_modeler/models/example.rb#141
  def parameters_output_string; end

  # source://cuke_modeler//lib/cuke_modeler/models/example.rb#125
  def parse_source(source_text); end

  # source://cuke_modeler//lib/cuke_modeler/models/example.rb#152
  def rows_output_string; end

  # source://cuke_modeler//lib/cuke_modeler/models/example.rb#169
  def string_for(cells, index); end

  # source://cuke_modeler//lib/cuke_modeler/models/example.rb#177
  def stringify_keys(hash); end
end

# A class modeling a feature in a Cucumber suite.
#
# source://cuke_modeler//lib/cuke_modeler/models/feature.rb#4
class CukeModeler::Feature < ::CukeModeler::Model
  include ::CukeModeler::Parsed
  include ::CukeModeler::Named
  include ::CukeModeler::Described
  include ::CukeModeler::Taggable
  include ::CukeModeler::Sourceable

  # Creates a new Feature object and, if *source_text* is provided, populates the
  # object.
  #
  # @return [Feature] a new instance of Feature
  #
  # source://cuke_modeler//lib/cuke_modeler/models/feature.rb#31
  def initialize(source_text = T.unsafe(nil)); end

  # The Background object contained by the Feature
  #
  # source://cuke_modeler//lib/cuke_modeler/models/feature.rb#20
  def background; end

  # The Background object contained by the Feature
  #
  # source://cuke_modeler//lib/cuke_modeler/models/feature.rb#20
  def background=(_arg0); end

  # Returns *true* if the feature contains a background, *false* otherwise.
  #
  # @return [Boolean]
  #
  # source://cuke_modeler//lib/cuke_modeler/models/feature.rb#45
  def background?; end

  # Returns the model objects that belong to this model.
  #
  # source://cuke_modeler//lib/cuke_modeler/models/feature.rb#75
  def children; end

  # Returns *true* if the feature contains a background, *false* otherwise.
  #
  # @return [Boolean]
  #
  # source://cuke_modeler//lib/cuke_modeler/models/feature.rb#45
  def has_background?; end

  # The keyword for the feature
  #
  # source://cuke_modeler//lib/cuke_modeler/models/feature.rb#17
  def keyword; end

  # The keyword for the feature
  #
  # source://cuke_modeler//lib/cuke_modeler/models/feature.rb#17
  def keyword=(_arg0); end

  # The language for the feature
  #
  # source://cuke_modeler//lib/cuke_modeler/models/feature.rb#14
  def language; end

  # The language for the feature
  #
  # source://cuke_modeler//lib/cuke_modeler/models/feature.rb#14
  def language=(_arg0); end

  # Returns the outline models contained in the feature.
  #
  # source://cuke_modeler//lib/cuke_modeler/models/feature.rb#57
  def outlines; end

  # The Rule objects contained by the Feature
  #
  # source://cuke_modeler//lib/cuke_modeler/models/feature.rb#23
  def rules; end

  # The Rule objects contained by the Feature
  #
  # source://cuke_modeler//lib/cuke_modeler/models/feature.rb#23
  def rules=(_arg0); end

  # Returns the scenario models contained in the feature.
  #
  # source://cuke_modeler//lib/cuke_modeler/models/feature.rb#52
  def scenarios; end

  # TODO: Remove this method on next major version release
  # DEPRECATED
  # Returns the number of test cases contained in the feature. A test case is a
  # single set of test values, such as an individual scenario or one example row
  # of an outline.
  #
  # source://cuke_modeler//lib/cuke_modeler/models/feature.rb#66
  def test_case_count; end

  # The Scenario and Outline objects contained by the Feature
  #
  # source://cuke_modeler//lib/cuke_modeler/models/feature.rb#26
  def tests; end

  # The Scenario and Outline objects contained by the Feature
  #
  # source://cuke_modeler//lib/cuke_modeler/models/feature.rb#26
  def tests=(_arg0); end

  # Returns a string representation of this model. For a feature model,
  # this will be Gherkin text that is equivalent to the feature being modeled.
  #
  # source://cuke_modeler//lib/cuke_modeler/models/feature.rb#87
  def to_s; end

  private

  # source://cuke_modeler//lib/cuke_modeler/models/feature.rb#112
  def background_output_string; end

  # source://cuke_modeler//lib/cuke_modeler/models/feature.rb#124
  def child_element_output_string(model); end

  # source://cuke_modeler//lib/cuke_modeler/models/feature.rb#106
  def parse_source(source_text); end

  # source://cuke_modeler//lib/cuke_modeler/models/feature.rb#120
  def rules_output_string; end

  # source://cuke_modeler//lib/cuke_modeler/models/feature.rb#116
  def tests_output_string; end
end

# A class modeling a feature file in a Cucumber suite.
#
# source://cuke_modeler//lib/cuke_modeler/models/feature_file.rb#4
class CukeModeler::FeatureFile < ::CukeModeler::Model
  include ::CukeModeler::Parsed

  # Creates a new FeatureFile object and, if *file_path* is provided,
  # populates the object.
  #
  # @raise [ArgumentError]
  # @return [FeatureFile] a new instance of FeatureFile
  #
  # source://cuke_modeler//lib/cuke_modeler/models/feature_file.rb#21
  def initialize(file_path = T.unsafe(nil)); end

  # Returns the model objects that belong to this model.
  #
  # source://cuke_modeler//lib/cuke_modeler/models/feature_file.rb#40
  def children; end

  # The comment models contained by the modeled feature file
  #
  # source://cuke_modeler//lib/cuke_modeler/models/feature_file.rb#10
  def comments; end

  # The comment models contained by the modeled feature file
  #
  # source://cuke_modeler//lib/cuke_modeler/models/feature_file.rb#10
  def comments=(_arg0); end

  # The feature model contained by the modeled feature file
  #
  # source://cuke_modeler//lib/cuke_modeler/models/feature_file.rb#13
  def feature; end

  # The feature model contained by the modeled feature file
  #
  # source://cuke_modeler//lib/cuke_modeler/models/feature_file.rb#13
  def feature=(_arg0); end

  # Returns the name of the modeled feature file.
  #
  # source://cuke_modeler//lib/cuke_modeler/models/feature_file.rb#35
  def name; end

  # The file path of the modeled feature file
  #
  # source://cuke_modeler//lib/cuke_modeler/models/feature_file.rb#16
  def path; end

  # The file path of the modeled feature file
  #
  # source://cuke_modeler//lib/cuke_modeler/models/feature_file.rb#16
  def path=(_arg0); end

  # Returns a string representation of this model. For a feature file
  # model, this will be the path of the modeled feature file.
  #
  # source://cuke_modeler//lib/cuke_modeler/models/feature_file.rb#46
  def to_s; end

  private

  # source://cuke_modeler//lib/cuke_modeler/models/feature_file.rb#54
  def process_feature_file(file_path); end
end

# NOT A PART OF THE PUBLIC API
# An adapter that can convert the output of version 20.x of the *cucumber-gherkin* gem into input that is consumable
# by this gem.
#
# source://cuke_modeler//lib/cuke_modeler/adapters/gherkin_20_adapter.rb#11
class CukeModeler::Gherkin20Adapter < ::CukeModeler::GherkinBaseAdapter
  # Adapts the given AST into the shape that this gem expects
  #
  # source://cuke_modeler//lib/cuke_modeler/adapters/gherkin_20_adapter.rb#14
  def adapt(ast); end

  # Adapts the AST sub-tree that is rooted at the given background node.
  #
  # source://cuke_modeler//lib/cuke_modeler/adapters/gherkin_20_adapter.rb#52
  def adapt_background(background_ast); end

  # Adapts the AST sub-tree that is rooted at the given comment node.
  #
  # source://cuke_modeler//lib/cuke_modeler/adapters/gherkin_20_adapter.rb#182
  def adapt_comment(comment_ast); end

  # Adapts the AST sub-tree that is rooted at the given doc string node.
  #
  # source://cuke_modeler//lib/cuke_modeler/adapters/gherkin_20_adapter.rb#219
  def adapt_doc_string(doc_string_ast); end

  # Adapts the AST sub-tree that is rooted at the given example node.
  #
  # source://cuke_modeler//lib/cuke_modeler/adapters/gherkin_20_adapter.rb#140
  def adapt_example(example_ast); end

  # Adapts the AST sub-tree that is rooted at the given feature node.
  #
  # source://cuke_modeler//lib/cuke_modeler/adapters/gherkin_20_adapter.rb#28
  def adapt_feature(feature_ast); end

  # Adapts the AST sub-tree that is rooted at the given outline node.
  #
  # source://cuke_modeler//lib/cuke_modeler/adapters/gherkin_20_adapter.rb#116
  def adapt_outline(test_ast); end

  # Adapts the AST sub-tree that is rooted at the given rule node.
  #
  # source://cuke_modeler//lib/cuke_modeler/adapters/gherkin_20_adapter.rb#72
  def adapt_rule(rule_ast); end

  # Adapts the AST sub-tree that is rooted at the given scenario node.
  #
  # source://cuke_modeler//lib/cuke_modeler/adapters/gherkin_20_adapter.rb#94
  def adapt_scenario(test_ast); end

  # Adapts the AST sub-tree that is rooted at the given step node.
  #
  # source://cuke_modeler//lib/cuke_modeler/adapters/gherkin_20_adapter.rb#196
  def adapt_step(step_ast); end

  # Adapts the AST sub-tree that is rooted at the given table node.
  #
  # source://cuke_modeler//lib/cuke_modeler/adapters/gherkin_20_adapter.rb#234
  def adapt_step_table(step_table_ast); end

  # Adapts the AST sub-tree that is rooted at the given cell node.
  #
  # source://cuke_modeler//lib/cuke_modeler/adapters/gherkin_20_adapter.rb#271
  def adapt_table_cell(cell_ast); end

  # Adapts the AST sub-tree that is rooted at the given row node.
  #
  # source://cuke_modeler//lib/cuke_modeler/adapters/gherkin_20_adapter.rb#252
  def adapt_table_row(table_row_ast); end

  # Adapts the AST sub-tree that is rooted at the given tag node.
  #
  # source://cuke_modeler//lib/cuke_modeler/adapters/gherkin_20_adapter.rb#168
  def adapt_tag(tag_ast); end

  private

  # source://cuke_modeler//lib/cuke_modeler/adapters/gherkin_20_adapter.rb#304
  def adapt_child_elements(element_ast); end

  # source://cuke_modeler//lib/cuke_modeler/adapters/gherkin_20_adapter.rb#288
  def adapt_comments(file_ast); end

  # source://cuke_modeler//lib/cuke_modeler/adapters/gherkin_20_adapter.rb#300
  def adapt_examples(element_ast); end

  # source://cuke_modeler//lib/cuke_modeler/adapters/gherkin_20_adapter.rb#296
  def adapt_steps(element_ast); end

  # source://cuke_modeler//lib/cuke_modeler/adapters/gherkin_20_adapter.rb#292
  def adapt_tags(element_ast); end

  # source://cuke_modeler//lib/cuke_modeler/adapters/gherkin_20_adapter.rb#320
  def adapt_test(test_ast); end

  # source://cuke_modeler//lib/cuke_modeler/adapters/gherkin_20_adapter.rb#328
  def clear_child_elements(ast, child_paths); end

  # @return [Boolean]
  #
  # source://cuke_modeler//lib/cuke_modeler/adapters/gherkin_20_adapter.rb#349
  def test_has_examples?(ast_node); end

  # @return [Boolean]
  #
  # source://cuke_modeler//lib/cuke_modeler/adapters/gherkin_20_adapter.rb#353
  def test_uses_outline_keyword?(test_ast); end
end

# NOT A PART OF THE PUBLIC API
# An adapter that can convert the output of version 26.x of the *cucumber-gherkin* gem into input that is consumable
# by this gem.
#
# source://cuke_modeler//lib/cuke_modeler/adapters/gherkin_26_adapter.rb#10
class CukeModeler::Gherkin26Adapter < ::CukeModeler::Gherkin20Adapter; end

# NOT A PART OF THE PUBLIC API
# A class providing some basic and common adapter functionality.
#
# source://cuke_modeler//lib/cuke_modeler/adapters/gherkin_base_adapter.rb#5
class CukeModeler::GherkinBaseAdapter
  private

  # source://cuke_modeler//lib/cuke_modeler/adapters/gherkin_base_adapter.rb#9
  def save_original_data(adapted_ast, raw_ast); end
end

# A class modeling an element of a Cucumber suite.
#
# source://cuke_modeler//lib/cuke_modeler/models/model.rb#4
class CukeModeler::Model
  include ::CukeModeler::Nested
  include ::Enumerable
  include ::CukeModeler::Containing

  # Creates a new Model object and, if *source_text* is provided,
  # populates the object.
  #
  # @raise [ArgumentError]
  # @return [Model] a new instance of Model
  #
  # source://cuke_modeler//lib/cuke_modeler/models/model.rb#12
  def initialize(source_text = T.unsafe(nil)); end

  # Returns the model objects that belong to this model.
  #
  # source://cuke_modeler//lib/cuke_modeler/models/model.rb#31
  def children; end

  # Returns a string representation of this model.
  #
  # source://cuke_modeler//lib/cuke_modeler/models/model.rb#23
  def to_s; end
end

# NOT A PART OF THE PUBLIC API
# A mix-in module containing methods used by models that represent an element that has a name.
#
# source://cuke_modeler//lib/cuke_modeler/named.rb#5
module CukeModeler::Named
  # The name of the element
  #
  # source://cuke_modeler//lib/cuke_modeler/named.rb#8
  def name; end

  # The name of the element
  #
  # source://cuke_modeler//lib/cuke_modeler/named.rb#8
  def name=(_arg0); end

  private

  # source://cuke_modeler//lib/cuke_modeler/named.rb#14
  def name_output_string; end

  # source://cuke_modeler//lib/cuke_modeler/named.rb#18
  def populate_name(model, parsed_model_data); end
end

# NOT A PART OF THE PUBLIC API
# A mix-in module containing methods used by models that are nested inside
# of other models.
#
# source://cuke_modeler//lib/cuke_modeler/nested.rb#6
module CukeModeler::Nested
  # Returns the ancestor model of this model that matches the given type.
  #
  # @raise [ArgumentError]
  #
  # source://cuke_modeler//lib/cuke_modeler/nested.rb#13
  def get_ancestor(ancestor_type); end

  # The parent model that contains this model
  #
  # source://cuke_modeler//lib/cuke_modeler/nested.rb#9
  def parent_model; end

  # The parent model that contains this model
  #
  # source://cuke_modeler//lib/cuke_modeler/nested.rb#9
  def parent_model=(_arg0); end

  private

  # source://cuke_modeler//lib/cuke_modeler/nested.rb#28
  def classes_for_type(type); end
end

# A class modeling an individual outline in a Cucumber suite.
#
# source://cuke_modeler//lib/cuke_modeler/models/outline.rb#4
class CukeModeler::Outline < ::CukeModeler::Model
  include ::CukeModeler::Parsing
  include ::CukeModeler::Parsed
  include ::CukeModeler::Named
  include ::CukeModeler::Described
  include ::CukeModeler::Stepped
  include ::CukeModeler::Sourceable
  include ::CukeModeler::Taggable

  # Creates a new Outline object and, if *source_text* is provided, populates the
  # object.
  #
  # @return [Outline] a new instance of Outline
  #
  # source://cuke_modeler//lib/cuke_modeler/models/outline.rb#24
  def initialize(source_text = T.unsafe(nil)); end

  # Returns *true* if the two models have equivalent steps and *false* otherwise.
  #
  # source://cuke_modeler//lib/cuke_modeler/models/outline.rb#38
  def ==(other); end

  # Returns the model objects that belong to this model.
  #
  # source://cuke_modeler//lib/cuke_modeler/models/outline.rb#45
  def children; end

  # The Example objects contained by the Outline
  #
  # source://cuke_modeler//lib/cuke_modeler/models/outline.rb#19
  def examples; end

  # The Example objects contained by the Outline
  #
  # source://cuke_modeler//lib/cuke_modeler/models/outline.rb#19
  def examples=(_arg0); end

  # The outline's keyword
  #
  # source://cuke_modeler//lib/cuke_modeler/models/outline.rb#16
  def keyword; end

  # The outline's keyword
  #
  # source://cuke_modeler//lib/cuke_modeler/models/outline.rb#16
  def keyword=(_arg0); end

  # Returns a string representation of this model. For an outline model,
  # this will be Gherkin text that is equivalent to the outline being modeled.
  #
  # source://cuke_modeler//lib/cuke_modeler/models/outline.rb#54
  def to_s; end

  private

  # source://cuke_modeler//lib/cuke_modeler/models/outline.rb#82
  def examples_output_string; end

  # source://cuke_modeler//lib/cuke_modeler/models/outline.rb#73
  def parse_source(source_text); end
end

# NOT A PART OF THE PUBLIC API
# A mix-in module containing methods used by models that are parsed from source text.
#
# source://cuke_modeler//lib/cuke_modeler/parsed.rb#5
module CukeModeler::Parsed
  # The parsing data for this element that was generated by the parsing engine (i.e. the *gherkin* gem)
  #
  # source://cuke_modeler//lib/cuke_modeler/parsed.rb#8
  def parsing_data; end

  # The parsing data for this element that was generated by the parsing engine (i.e. the *gherkin* gem)
  #
  # source://cuke_modeler//lib/cuke_modeler/parsed.rb#8
  def parsing_data=(_arg0); end

  private

  # source://cuke_modeler//lib/cuke_modeler/parsed.rb#14
  def populate_parsing_data(model, parsed_model_data); end
end

# A module providing source text parsing functionality.
#
# source://cuke_modeler//lib/cuke_modeler/parsing.rb#22
module CukeModeler::Parsing
  private

  # source://cuke_modeler//lib/cuke_modeler/parsing.rb#170
  def dialect_feature_keyword; end

  # source://cuke_modeler//lib/cuke_modeler/parsing.rb#178
  def dialect_outline_keyword; end

  # source://cuke_modeler//lib/cuke_modeler/parsing.rb#174
  def dialect_scenario_keyword; end

  # source://cuke_modeler//lib/cuke_modeler/parsing.rb#183
  def dialect_step_keyword; end

  # source://cuke_modeler//lib/cuke_modeler/parsing.rb#187
  def get_word(word_set); end

  class << self
    # source://cuke_modeler//lib/cuke_modeler/parsing.rb#160
    def adapter_class; end

    # The dialect that will be used to parse snippets of Gherkin text
    #
    # source://cuke_modeler//lib/cuke_modeler/parsing.rb#31
    def dialect; end

    # The dialect that will be used to parse snippets of Gherkin text
    #
    # source://cuke_modeler//lib/cuke_modeler/parsing.rb#27
    def dialect=(_arg0); end

    # The dialects currently known by the gherkin gem
    #
    # source://cuke_modeler//lib/cuke_modeler/parsing.rb#36
    def dialects; end

    # Parses the Cucumber feature given in *source_text* and returns a hash representation of
    # its logical structure. This is a standardized AST that should remain consistent across
    # different versions of `cucumber-gherkin`
    #
    # source://cuke_modeler//lib/cuke_modeler/parsing.rb#43
    def parse_text(source_text, filename = T.unsafe(nil)); end

    # source://cuke_modeler//lib/cuke_modeler/parsing.rb#70
    def parsing_method(source_text, filename); end
  end
end

# A class modeling a single row of a step table or example table.
#
# source://cuke_modeler//lib/cuke_modeler/models/row.rb#4
class CukeModeler::Row < ::CukeModeler::Model
  include ::CukeModeler::Sourceable
  include ::CukeModeler::Parsing
  include ::CukeModeler::Parsed

  # Creates a new Row object and, if *source_text* is provided, populates
  # the object.
  #
  # @return [Row] a new instance of Row
  #
  # source://cuke_modeler//lib/cuke_modeler/models/row.rb#16
  def initialize(source_text = T.unsafe(nil)); end

  # The cell models that make up the row
  #
  # source://cuke_modeler//lib/cuke_modeler/models/row.rb#11
  def cells; end

  # The cell models that make up the row
  #
  # source://cuke_modeler//lib/cuke_modeler/models/row.rb#11
  def cells=(_arg0); end

  # Returns the model objects that belong to this model.
  #
  # source://cuke_modeler//lib/cuke_modeler/models/row.rb#28
  def children; end

  # Returns a string representation of this model. For a row model,
  # this will be Gherkin text that is equivalent to the row being modeled.
  #
  # source://cuke_modeler//lib/cuke_modeler/models/row.rb#34
  def to_s; end

  private

  # source://cuke_modeler//lib/cuke_modeler/models/row.rb#44
  def parse_source(source_text); end
end

# A class modeling a rule in a Cucumber suite.
#
# source://cuke_modeler//lib/cuke_modeler/models/rule.rb#4
class CukeModeler::Rule < ::CukeModeler::Model
  include ::CukeModeler::Parsing
  include ::CukeModeler::Parsed
  include ::CukeModeler::Named
  include ::CukeModeler::Described
  include ::CukeModeler::Taggable
  include ::CukeModeler::Sourceable

  # Creates a new Rule object and, if *source_text* is provided, populates the
  # object.
  #
  # @return [Rule] a new instance of Rule
  #
  # source://cuke_modeler//lib/cuke_modeler/models/rule.rb#26
  def initialize(source_text = T.unsafe(nil)); end

  # The Background object contained by the Rule
  #
  # source://cuke_modeler//lib/cuke_modeler/models/rule.rb#18
  def background; end

  # The Background object contained by the Rule
  #
  # source://cuke_modeler//lib/cuke_modeler/models/rule.rb#18
  def background=(_arg0); end

  # Returns *true* if the rule contains a background, *false* otherwise.
  #
  # @return [Boolean]
  #
  # source://cuke_modeler//lib/cuke_modeler/models/rule.rb#39
  def background?; end

  # Returns the model objects that belong to this model.
  #
  # source://cuke_modeler//lib/cuke_modeler/models/rule.rb#56
  def children; end

  # Returns *true* if the rule contains a background, *false* otherwise.
  #
  # @return [Boolean]
  #
  # source://cuke_modeler//lib/cuke_modeler/models/rule.rb#39
  def has_background?; end

  # The keyword for the rule
  #
  # source://cuke_modeler//lib/cuke_modeler/models/rule.rb#15
  def keyword; end

  # The keyword for the rule
  #
  # source://cuke_modeler//lib/cuke_modeler/models/rule.rb#15
  def keyword=(_arg0); end

  # Returns the outline models contained in the rule.
  #
  # source://cuke_modeler//lib/cuke_modeler/models/rule.rb#51
  def outlines; end

  # Returns the scenario models contained in the rule.
  #
  # source://cuke_modeler//lib/cuke_modeler/models/rule.rb#46
  def scenarios; end

  # The Scenario and Outline objects contained by the Rule
  #
  # source://cuke_modeler//lib/cuke_modeler/models/rule.rb#21
  def tests; end

  # The Scenario and Outline objects contained by the Rule
  #
  # source://cuke_modeler//lib/cuke_modeler/models/rule.rb#21
  def tests=(_arg0); end

  # Returns a string representation of this model. For a rule model,
  # this will be Gherkin text that is equivalent to the rule being modeled.
  #
  # source://cuke_modeler//lib/cuke_modeler/models/rule.rb#65
  def to_s; end

  private

  # source://cuke_modeler//lib/cuke_modeler/models/rule.rb#90
  def background_output_string; end

  # source://cuke_modeler//lib/cuke_modeler/models/rule.rb#81
  def parse_source(source_text); end

  # source://cuke_modeler//lib/cuke_modeler/models/rule.rb#98
  def test_output_string(model); end

  # source://cuke_modeler//lib/cuke_modeler/models/rule.rb#94
  def tests_output_string; end
end

# A class modeling an individual scenario of a Cucumber suite.
#
# source://cuke_modeler//lib/cuke_modeler/models/scenario.rb#4
class CukeModeler::Scenario < ::CukeModeler::Model
  include ::CukeModeler::Parsing
  include ::CukeModeler::Parsed
  include ::CukeModeler::Named
  include ::CukeModeler::Described
  include ::CukeModeler::Stepped
  include ::CukeModeler::Sourceable
  include ::CukeModeler::Taggable

  # Creates a new Scenario object and, if *source_text* is provided, populates the
  # object.
  #
  # @return [Scenario] a new instance of Scenario
  #
  # source://cuke_modeler//lib/cuke_modeler/models/scenario.rb#21
  def initialize(source_text = T.unsafe(nil)); end

  # Returns *true* if the two models have equivalent steps and *false* otherwise.
  #
  # source://cuke_modeler//lib/cuke_modeler/models/scenario.rb#34
  def ==(other); end

  # Returns the model objects that belong to this model.
  #
  # source://cuke_modeler//lib/cuke_modeler/models/scenario.rb#41
  def children; end

  # The scenario's keyword
  #
  # source://cuke_modeler//lib/cuke_modeler/models/scenario.rb#16
  def keyword; end

  # The scenario's keyword
  #
  # source://cuke_modeler//lib/cuke_modeler/models/scenario.rb#16
  def keyword=(_arg0); end

  # Returns a string representation of this model. For a scenario model,
  # this will be Gherkin text that is equivalent to the scenario being modeled.
  #
  # source://cuke_modeler//lib/cuke_modeler/models/scenario.rb#50
  def to_s; end

  private

  # source://cuke_modeler//lib/cuke_modeler/models/scenario.rb#68
  def parse_source(source_text); end
end

# NOT A PART OF THE PUBLIC API
# A mix-in module containing methods used by models that know from which line of
# source code they originate.
#
# source://cuke_modeler//lib/cuke_modeler/sourceable.rb#6
module CukeModeler::Sourceable
  # The column number where the element began in the source code
  #
  # source://cuke_modeler//lib/cuke_modeler/sourceable.rb#12
  def source_column; end

  # The column number where the element began in the source code
  #
  # source://cuke_modeler//lib/cuke_modeler/sourceable.rb#12
  def source_column=(_arg0); end

  # The line number where the element began in the source code
  #
  # source://cuke_modeler//lib/cuke_modeler/sourceable.rb#9
  def source_line; end

  # The line number where the element began in the source code
  #
  # source://cuke_modeler//lib/cuke_modeler/sourceable.rb#9
  def source_line=(_arg0); end

  private

  # source://cuke_modeler//lib/cuke_modeler/sourceable.rb#17
  def populate_source_location(model, parsed_model_data); end
end

# A class modeling a single step of a background, scenario, or outline.
#
# source://cuke_modeler//lib/cuke_modeler/models/step.rb#4
class CukeModeler::Step < ::CukeModeler::Model
  include ::CukeModeler::Sourceable
  include ::CukeModeler::Parsing
  include ::CukeModeler::Parsed

  # Creates a new Step object and, if *source_text* is provided, populates the
  # object.
  #
  # @return [Step] a new instance of Step
  #
  # source://cuke_modeler//lib/cuke_modeler/models/step.rb#23
  def initialize(source_text = T.unsafe(nil)); end

  # Returns *true* if the two steps have the same base text (i.e. minus any keyword,
  # table, or doc string and *false* otherwise.
  #
  # source://cuke_modeler//lib/cuke_modeler/models/step.rb#34
  def ==(other); end

  # The step's passed block
  #
  # source://cuke_modeler//lib/cuke_modeler/models/step.rb#18
  def block; end

  # The step's passed block
  #
  # source://cuke_modeler//lib/cuke_modeler/models/step.rb#18
  def block=(_arg0); end

  # Returns the model objects that belong to this model.
  #
  # source://cuke_modeler//lib/cuke_modeler/models/step.rb#43
  def children; end

  # The step's keyword
  #
  # source://cuke_modeler//lib/cuke_modeler/models/step.rb#12
  def keyword; end

  # The step's keyword
  #
  # source://cuke_modeler//lib/cuke_modeler/models/step.rb#12
  def keyword=(_arg0); end

  # The base text of the step
  #
  # source://cuke_modeler//lib/cuke_modeler/models/step.rb#15
  def text; end

  # The base text of the step
  #
  # source://cuke_modeler//lib/cuke_modeler/models/step.rb#15
  def text=(_arg0); end

  # Returns a string representation of this model. For a step model,
  # this will be Gherkin text that is equivalent to the step being modeled.
  #
  # source://cuke_modeler//lib/cuke_modeler/models/step.rb#49
  def to_s; end

  private

  # @return [Boolean]
  #
  # source://cuke_modeler//lib/cuke_modeler/models/step.rb#85
  def doc_string_matches?(other_step); end

  # @return [Boolean]
  #
  # source://cuke_modeler//lib/cuke_modeler/models/step.rb#113
  def neither_step_has_doc_string?(other_step); end

  # @return [Boolean]
  #
  # source://cuke_modeler//lib/cuke_modeler/models/step.rb#103
  def neither_step_has_table?(other_step); end

  # @return [Boolean]
  #
  # source://cuke_modeler//lib/cuke_modeler/models/step.rb#108
  def only_one_step_has_doc_string?(other_step); end

  # @return [Boolean]
  #
  # source://cuke_modeler//lib/cuke_modeler/models/step.rb#98
  def only_one_step_has_table?(other_step); end

  # source://cuke_modeler//lib/cuke_modeler/models/step.rb#60
  def parse_source(source_text); end

  # @return [Boolean]
  #
  # source://cuke_modeler//lib/cuke_modeler/models/step.rb#75
  def table_matches?(other_step); end

  # @return [Boolean]
  #
  # source://cuke_modeler//lib/cuke_modeler/models/step.rb#71
  def text_matches?(other_step); end
end

# NOT A PART OF THE PUBLIC API
# A mix-in module containing methods used by models that represent an element that has steps.
#
# source://cuke_modeler//lib/cuke_modeler/stepped.rb#5
module CukeModeler::Stepped
  # The step models contained by this model
  #
  # source://cuke_modeler//lib/cuke_modeler/stepped.rb#9
  def steps; end

  # The step models contained by this model
  #
  # source://cuke_modeler//lib/cuke_modeler/stepped.rb#9
  def steps=(_arg0); end

  private

  # source://cuke_modeler//lib/cuke_modeler/stepped.rb#19
  def indented_step_text(step); end

  # source://cuke_modeler//lib/cuke_modeler/stepped.rb#23
  def populate_steps(model, parsed_model_data); end

  # source://cuke_modeler//lib/cuke_modeler/stepped.rb#15
  def steps_output_string; end
end

# A class modeling a step's table.
#
# source://cuke_modeler//lib/cuke_modeler/models/table.rb#4
class CukeModeler::Table < ::CukeModeler::Model
  include ::CukeModeler::Parsing
  include ::CukeModeler::Parsed
  include ::CukeModeler::Sourceable

  # Creates a new Table object and, if *source_text* is provided, populates
  # the object.
  #
  # @return [Table] a new instance of Table
  #
  # source://cuke_modeler//lib/cuke_modeler/models/table.rb#17
  def initialize(source_text = T.unsafe(nil)); end

  # Returns the model objects that belong to this model.
  #
  # source://cuke_modeler//lib/cuke_modeler/models/table.rb#29
  def children; end

  # The row models that make up the table
  #
  # source://cuke_modeler//lib/cuke_modeler/models/table.rb#12
  def rows; end

  # The row models that make up the table
  #
  # source://cuke_modeler//lib/cuke_modeler/models/table.rb#12
  def rows=(_arg0); end

  # Returns a string representation of this model. For a table model,
  # this will be Gherkin text that is equivalent to the table being modeled.
  #
  # source://cuke_modeler//lib/cuke_modeler/models/table.rb#35
  def to_s; end

  private

  # source://cuke_modeler//lib/cuke_modeler/models/table.rb#65
  def determine_buffer_size(index); end

  # source://cuke_modeler//lib/cuke_modeler/models/table.rb#43
  def parse_source(source_text); end

  # source://cuke_modeler//lib/cuke_modeler/models/table.rb#55
  def row_output_string(row); end
end

# A class modeling a tag.
#
# source://cuke_modeler//lib/cuke_modeler/models/tag.rb#4
class CukeModeler::Tag < ::CukeModeler::Model
  include ::CukeModeler::Parsing
  include ::CukeModeler::Parsed
  include ::CukeModeler::Sourceable

  # Creates a new Tag object and, if *source_text* is provided, populates the
  # object.
  #
  # @return [Tag] a new instance of Tag
  #
  # source://cuke_modeler//lib/cuke_modeler/models/tag.rb#17
  def initialize(source_text = T.unsafe(nil)); end

  # The name of the tag
  #
  # source://cuke_modeler//lib/cuke_modeler/models/tag.rb#12
  def name; end

  # The name of the tag
  #
  # source://cuke_modeler//lib/cuke_modeler/models/tag.rb#12
  def name=(_arg0); end

  # Returns a string representation of this model. For a tag model,
  # this will be Gherkin text that is equivalent to the tag being modeled.
  #
  # source://cuke_modeler//lib/cuke_modeler/models/tag.rb#28
  def to_s; end

  private

  # source://cuke_modeler//lib/cuke_modeler/models/tag.rb#36
  def parse_source(source_text); end

  # source://cuke_modeler//lib/cuke_modeler/models/tag.rb#45
  def populate_name(model, parsed_model_data); end
end

# NOT A PART OF THE PUBLIC API
# A mix-in module containing methods used by models that represent an element that can be tagged.
#
# source://cuke_modeler//lib/cuke_modeler/taggable.rb#5
module CukeModeler::Taggable
  # Returns models for all of the tags which are applicable to the element.
  #
  # source://cuke_modeler//lib/cuke_modeler/taggable.rb#18
  def all_tags; end

  # Returns the models for tags which are indirectly assigned to the element (i.e. they
  # have been inherited from a parent element).
  #
  # source://cuke_modeler//lib/cuke_modeler/taggable.rb#13
  def applied_tags; end

  # The models for tags which are directly assigned to the element
  #
  # source://cuke_modeler//lib/cuke_modeler/taggable.rb#8
  def tags; end

  # The models for tags which are directly assigned to the element
  #
  # source://cuke_modeler//lib/cuke_modeler/taggable.rb#8
  def tags=(_arg0); end

  private

  # source://cuke_modeler//lib/cuke_modeler/taggable.rb#30
  def populate_tags(model, parsed_model_data); end

  # source://cuke_modeler//lib/cuke_modeler/taggable.rb#26
  def tag_output_string; end
end

# The gem version
#
# source://cuke_modeler//lib/cuke_modeler/version.rb#3
CukeModeler::VERSION = T.let(T.unsafe(nil), String)
