# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `turnip` gem.
# Please instead update this file by running `bin/tapioca gem turnip`.

class Module
  include ::Turnip::Define
end

# source://turnip//lib/turnip/version.rb#1
module Turnip
  class << self
    # Returns the value of attribute type.
    #
    # source://turnip//lib/turnip.rb#23
    def type; end

    # Sets the attribute type
    #
    # @param value the value to set the attribute type to.
    #
    # source://turnip//lib/turnip.rb#23
    def type=(_arg0); end
  end
end

# source://turnip//lib/turnip.rb#12
class Turnip::Ambiguous < ::StandardError; end

# source://turnip//lib/turnip/builder.rb#5
class Turnip::Builder
  class << self
    # source://turnip//lib/turnip/builder.rb#6
    def build(feature_file); end
  end
end

# source://turnip//lib/turnip/dsl.rb#2
module Turnip::DSL
  # source://turnip//lib/turnip/dsl.rb#3
  def placeholder(*name, &block); end

  # source://turnip//lib/turnip/dsl.rb#9
  def step(description, &block); end

  # source://turnip//lib/turnip/dsl.rb#13
  def steps_for(tag, &block); end
end

# source://turnip//lib/turnip/define.rb#2
module Turnip::Define
  # source://turnip//lib/turnip/define.rb#3
  def step(method_name = T.unsafe(nil), expression, &block); end
end

# source://turnip//lib/turnip/execute.rb#2
module Turnip::Execute
  # source://turnip//lib/turnip/execute.rb#3
  def step(step_or_description, *extra_args); end
end

# source://turnip//lib/turnip/node/location.rb#2
module Turnip::Node; end

# @note Background metadata generated by Gherkin
#
#   {
#   type: :Background,
#   location: { line: 10, column: 3 },
#   keyword: "Background",
#   name: "Background Description",
#   steps: []
#   }
#
# source://turnip//lib/turnip/node/background.rb#16
class Turnip::Node::Background < ::Turnip::Node::ScenarioDefinition; end

# source://turnip//lib/turnip/node/base.rb#5
class Turnip::Node::Base
  include ::Turnip::Node::HasLocation

  # @return [Base] a new instance of Base
  #
  # source://turnip//lib/turnip/node/base.rb#10
  def initialize(raw); end

  # Returns the value of attribute raw.
  #
  # source://turnip//lib/turnip/node/base.rb#8
  def raw; end
end

# @note Example metadata generated by Gherkin
#
#   {
#   type: :Examples,
#   tags: [], # Array of Tag
#   location: { line: 10, column: 3 },
#   keyword: "Examples",
#   name: "Example Description",
#   tableHeader: {},
#   tableBody: {}
#   }
#
# source://turnip//lib/turnip/node/example.rb#19
class Turnip::Node::Example < ::Turnip::Node::Base
  include ::Turnip::Node::HasTags

  # source://turnip//lib/turnip/node/example.rb#30
  def description; end

  # @note Examples:
  #   | monster | hp |
  #   | slime   | 10 | => [ 'monster', 'hp' ]
  #   | daemon  | 70 |
  # @return [Array]
  #
  # source://turnip//lib/turnip/node/example.rb#44
  def header; end

  # source://turnip//lib/turnip/node/example.rb#22
  def keyword; end

  # source://turnip//lib/turnip/node/example.rb#26
  def name; end

  # @note Examples:
  #   | monster | hp |
  #   | slime   | 10 | => [ ['slime', '10'], ['daemon', '70'] ]
  #   | daemon  | 70 |
  # @return [Array]
  #
  # source://turnip//lib/turnip/node/example.rb#58
  def rows; end
end

# @note Feature metadata generated by Gherkin
#
#   {
#   type: :Feature,
#   tags: [], # Array of Tag
#   location: { line: 10, column: 3 },
#   language: 'en',
#   keyword: 'Feature',
#   name: 'Feature name',
#   description: 'Feature description',
#   children: [], # Array of Background, Scenario and Scenario Outline
#   }
#
# source://turnip//lib/turnip/node/feature.rb#22
class Turnip::Node::Feature < ::Turnip::Node::ScenarioGroupDefinition
  include ::Turnip::Node::HasTags

  # source://turnip//lib/turnip/node/feature.rb#29
  def children; end

  # source://turnip//lib/turnip/node/feature.rb#25
  def language; end

  # source://turnip//lib/turnip/node/feature.rb#55
  def metadata_hash; end

  # source://turnip//lib/turnip/node/feature.rb#49
  def rules; end
end

# source://turnip//lib/turnip/node/location.rb#21
module Turnip::Node::HasLocation
  # source://turnip//lib/turnip/node/location.rb#29
  def line; end

  # @return [Location]
  #
  # source://turnip//lib/turnip/node/location.rb#25
  def location; end
end

# source://turnip//lib/turnip/node/tag.rb#20
module Turnip::Node::HasTags
  # Convert for hash to be used in RSpec
  #
  # @return [Hash]
  #
  # source://turnip//lib/turnip/node/tag.rb#42
  def metadata_hash; end

  # @return [Array] Array of tag name
  #
  # source://turnip//lib/turnip/node/tag.rb#33
  def tag_names; end

  # @return [Array] Array of Tag
  #
  # source://turnip//lib/turnip/node/tag.rb#24
  def tags; end
end

# @note Location metadata generated by Gherkin
#
#   {
#   line: 10,
#   column: 3
#   }
#
# source://turnip//lib/turnip/node/location.rb#11
class Turnip::Node::Location
  # @return [Location] a new instance of Location
  #
  # source://turnip//lib/turnip/node/location.rb#15
  def initialize(line, column); end

  # Returns the value of attribute column.
  #
  # source://turnip//lib/turnip/node/location.rb#12
  def column; end

  # Returns the value of attribute line.
  #
  # source://turnip//lib/turnip/node/location.rb#12
  def line; end
end

# @note Rule metadata generated by Gherkin
#
#   {
#   type: :Rule,
#   location: { line: 10, column: 3 },
#   keyword: 'Rule',
#   name: 'Rule name',
#   description: 'Rule description',
#   children: [] # Array of Background, Scenario and Scenario Outline
#   }
#
# source://turnip//lib/turnip/node/rule.rb#17
class Turnip::Node::Rule < ::Turnip::Node::ScenarioGroupDefinition
  # source://turnip//lib/turnip/node/rule.rb#18
  def children; end
end

# @note Scenario metadata generated by Gherkin
#
#   {
#   type: :Scenario,
#   tags: [], # Array of Tag
#   location: { line: 10, column: 3 },
#   keyword: "Scenario",
#   name: "Scenario Description",
#   steps: []
#   }
#
# source://turnip//lib/turnip/node/scenario.rb#18
class Turnip::Node::Scenario < ::Turnip::Node::ScenarioDefinition
  include ::Turnip::Node::HasTags
end

# source://turnip//lib/turnip/node/scenario_definition.rb#6
class Turnip::Node::ScenarioDefinition < ::Turnip::Node::Base
  # source://turnip//lib/turnip/node/scenario_definition.rb#15
  def description; end

  # source://turnip//lib/turnip/node/scenario_definition.rb#11
  def keyword; end

  # source://turnip//lib/turnip/node/scenario_definition.rb#7
  def name; end

  # source://turnip//lib/turnip/node/scenario_definition.rb#19
  def steps; end
end

# source://turnip//lib/turnip/node/scenario_group_definition.rb#8
class Turnip::Node::ScenarioGroupDefinition < ::Turnip::Node::Base
  # source://turnip//lib/turnip/node/scenario_group_definition.rb#21
  def backgrounds; end

  # source://turnip//lib/turnip/node/scenario_group_definition.rb#17
  def description; end

  # source://turnip//lib/turnip/node/scenario_group_definition.rb#13
  def keyword; end

  # source://turnip//lib/turnip/node/scenario_group_definition.rb#9
  def name; end

  # source://turnip//lib/turnip/node/scenario_group_definition.rb#27
  def scenarios; end
end

# @note ScenarioOutline metadata generated by Gherkin
#
#   {
#   type: :Scenario,
#   tags: [], # Array of Tag
#   location: { line: 10, column: 3 },
#   keyword: "Scenario Outline",
#   name: "Scenario Outline Description",
#   steps: []
#   }
#
# source://turnip//lib/turnip/node/scenario_outline.rb#19
class Turnip::Node::ScenarioOutline < ::Turnip::Node::ScenarioDefinition
  include ::Turnip::Node::HasTags

  # source://turnip//lib/turnip/node/scenario_outline.rb#22
  def examples; end

  # Return array of Scenario
  #
  # @note example:
  #
  #   Scenario Outline: Test
  #   Then I go to <where>
  #
  #   Examples:
  #   | where   |
  #   | bank    |
  #   | airport |
  #
  #   to
  #
  #   Scenario: Test
  #   Then I go to bank
  #
  #   Scenario: Test
  #   Then I go to airport
  # @return [Array]
  #
  # source://turnip//lib/turnip/node/scenario_outline.rb#53
  def to_scenarios; end

  private

  # Convert ScenariOutline metadata for Scenario
  #
  # @example:
  #
  #     {
  #       "type": "ScenarioOutline",
  #       "tags": ['tag'],
  #       "location": {'loc'},
  #       "keyword": "Scenario Outline",
  #       "name": "...",
  #       "steps": [],
  #       "examples": []
  #     }
  #
  #     to
  #
  #     {
  #       "type": "Scenario",
  #       "tags": ['tag'],
  #       "location": {'loc'},
  #       "keyword": "Scenario",
  #       "name": "...",
  #       "steps": []
  #     }
  #
  # @note At this method, placeholder of step text is not replaced yet
  # @return [Hash]
  # @todo :keyword is not considered a language (en only)
  #
  # source://turnip//lib/turnip/node/scenario_outline.rb#118
  def convert_metadata_to_scenario(header, row); end

  # Replace placeholder `<..>`
  #
  # @example:
  #
  #    text = 'There is a <monster> that has <hp> hitpoints.'
  #    header = ['monster', 'hp']
  #    row = ['slime', '10']
  #
  #    substitute(text, header, row)
  #    # => 'There is a slime that has 10 hitpoints.'
  #
  # @param text [String]
  # @param header [Array]
  # @param row [Array]
  # @return [String]
  #
  # source://turnip//lib/turnip/node/scenario_outline.rb#148
  def substitute(text, header, row); end
end

# @note Step metadata generated by Gherkin
#
#   {
#   type: :Step,
#   location: { line: 10, column: 3 },
#   keyword: 'Step',
#   text: 'Step description',
#   argument: {}, # DocString or DataTable
#   }
#
# source://turnip//lib/turnip/node/step.rb#17
class Turnip::Node::Step < ::Turnip::Node::Base
  # source://turnip//lib/turnip/node/step.rb#34
  def argument; end

  # Backward compatibility
  #
  # source://turnip//lib/turnip/node/step.rb#30
  def description; end

  # source://turnip//lib/turnip/node/step.rb#18
  def keyword; end

  # source://turnip//lib/turnip/node/step.rb#23
  def text; end

  # source://turnip//lib/turnip/node/step.rb#43
  def to_s; end

  private

  # source://turnip//lib/turnip/node/step.rb#53
  def data_table(table); end

  # source://turnip//lib/turnip/node/step.rb#49
  def doc_string(doc); end
end

# @note Location metadata generated by Gherkin
#
#   {
#   type: :Tag,
#   location: { line: 10, column: 3 },
#   name: '@tag'
#   }
#
# source://turnip//lib/turnip/node/tag.rb#14
class Turnip::Node::Tag < ::Turnip::Node::Base
  # source://turnip//lib/turnip/node/tag.rb#15
  def name; end
end

# source://turnip//lib/turnip.rb#11
class Turnip::Pending < ::StandardError; end

# source://turnip//lib/turnip/placeholder.rb#2
class Turnip::Placeholder
  # @return [Placeholder] a new instance of Placeholder
  #
  # source://turnip//lib/turnip/placeholder.rb#42
  def initialize(name, &block); end

  # source://turnip//lib/turnip/placeholder.rb#49
  def apply(value); end

  # source://turnip//lib/turnip/placeholder.rb#58
  def default(&block); end

  # source://turnip//lib/turnip/placeholder.rb#54
  def match(regexp, &block); end

  # source://turnip//lib/turnip/placeholder.rb#65
  def regexp; end

  private

  # source://turnip//lib/turnip/placeholder.rb#71
  def find_match(value); end

  # source://turnip//lib/turnip/placeholder.rb#88
  def placeholder_matches; end

  class << self
    # source://turnip//lib/turnip/placeholder.rb#6
    def add(name, &block); end

    # source://turnip//lib/turnip/placeholder.rb#19
    def apply(name, value); end

    # source://turnip//lib/turnip/placeholder.rb#23
    def find(name); end

    # source://turnip//lib/turnip/placeholder.rb#15
    def resolve(name); end

    private

    # source://turnip//lib/turnip/placeholder.rb#33
    def default; end

    # source://turnip//lib/turnip/placeholder.rb#29
    def placeholders; end
  end
end

# source://turnip//lib/turnip/placeholder.rb#3
class Turnip::Placeholder::Match < ::Struct; end

# source://turnip//lib/turnip/step_definition.rb#2
class Turnip::StepDefinition
  # @return [StepDefinition] a new instance of StepDefinition
  #
  # source://turnip//lib/turnip/step_definition.rb#15
  def initialize(expression, method_name = T.unsafe(nil), called_from = T.unsafe(nil), &block); end

  # Returns the value of attribute block.
  #
  # source://turnip//lib/turnip/step_definition.rb#13
  def block; end

  # Returns the value of attribute called_from.
  #
  # source://turnip//lib/turnip/step_definition.rb#13
  def called_from; end

  # Returns the value of attribute expression.
  #
  # source://turnip//lib/turnip/step_definition.rb#13
  def expression; end

  # source://turnip//lib/turnip/step_definition.rb#26
  def match(description); end

  # Returns the value of attribute method_name.
  #
  # source://turnip//lib/turnip/step_definition.rb#13
  def method_name; end

  # source://turnip//lib/turnip/step_definition.rb#22
  def regexp; end

  protected

  # source://turnip//lib/turnip/step_definition.rb#43
  def compile_regexp; end
end

# source://turnip//lib/turnip/step_definition.rb#41
Turnip::StepDefinition::ALTERNATIVE_WORD_REGEXP = T.let(T.unsafe(nil), Regexp)

# source://turnip//lib/turnip/step_definition.rb#3
class Turnip::StepDefinition::Match < ::Struct
  # source://turnip//lib/turnip/step_definition.rb#6
  def called_from; end

  # source://turnip//lib/turnip/step_definition.rb#4
  def expression; end

  # source://turnip//lib/turnip/step_definition.rb#5
  def method_name; end

  # source://turnip//lib/turnip/step_definition.rb#8
  def trace; end
end

# source://turnip//lib/turnip/step_definition.rb#39
Turnip::StepDefinition::OPTIONAL_WORD_REGEXP = T.let(T.unsafe(nil), Regexp)

# source://turnip//lib/turnip/step_definition.rb#40
Turnip::StepDefinition::PLACEHOLDER_REGEXP = T.let(T.unsafe(nil), Regexp)

# The global step module, adding steps here will make them available in all
# your tests.
#
# source://turnip//lib/turnip.rb#19
module Turnip::Steps; end

# source://turnip//lib/turnip/table.rb#2
class Turnip::Table
  include ::Enumerable

  # @return [Table] a new instance of Table
  #
  # source://turnip//lib/turnip/table.rb#20
  def initialize(raw); end

  # source://turnip//lib/turnip/table.rb#45
  def each; end

  # source://turnip//lib/turnip/table.rb#32
  def hashes; end

  # source://turnip//lib/turnip/table.rb#24
  def headers; end

  # source://turnip//lib/turnip/table.rb#49
  def map_column!(name, strict = T.unsafe(nil)); end

  # Returns the value of attribute raw.
  #
  # source://turnip//lib/turnip/table.rb#15
  def raw; end

  # source://turnip//lib/turnip/table.rb#28
  def rows; end

  # @raise [WidthMismatch]
  #
  # source://turnip//lib/turnip/table.rb#36
  def rows_hash; end

  # Returns the value of attribute raw.
  #
  # source://turnip//lib/turnip/table.rb#15
  def to_a; end

  # source://turnip//lib/turnip/table.rb#41
  def transpose; end

  private

  # source://turnip//lib/turnip/table.rb#60
  def width; end
end

# source://turnip//lib/turnip/table.rb#9
class Turnip::Table::ColumnNotExist < ::StandardError
  # @return [ColumnNotExist] a new instance of ColumnNotExist
  #
  # source://turnip//lib/turnip/table.rb#10
  def initialize(column_name); end
end

# source://turnip//lib/turnip/table.rb#3
class Turnip::Table::WidthMismatch < ::StandardError
  # @return [WidthMismatch] a new instance of WidthMismatch
  #
  # source://turnip//lib/turnip/table.rb#4
  def initialize(expected, actual); end
end

# source://turnip//lib/turnip/version.rb#2
Turnip::VERSION = T.let(T.unsafe(nil), String)
