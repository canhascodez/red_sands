# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strict
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/wisper_next/all/wisper_next.rbi
#
# wisper_next-0.1.0

module WisperNext
  def self.publisher; end
  def self.subscriber(*args); end
end
class WisperNext::Publisher < Module
  def included(descendant); end
end
class WisperNext::Publisher::CallableAdapter
  def ==(other); end
  def callable; end
  def event_name; end
  def initialize(event_name, callable); end
  def on_event(name, payload); end
end
class WisperNext::Publisher::ListenerAlreadyRegisteredError < StandardError
  def initialize(listener); end
end
class WisperNext::Publisher::NoEventHandlerError < ArgumentError
  def initialize(listener); end
end
module WisperNext::Publisher::Methods
  def broadcast(name, payload = nil); end
  def on(name, &block); end
  def subscribe(listener); end
  def subscribed?(listener); end
  def subscribers; end
end
class WisperNext::CastToOptions
  def self.call(arguments); end
end
class WisperNext::Subscriber < Module
  def broadcaster_for(name, opts = nil); end
  def initialize(*args); end
  def resolve_broadcaster(options); end
end
class WisperNext::Subscriber::SendBroadcaster
  def call(subscriber, event_name, payload); end
  def initialize(options = nil); end
end
class WisperNext::Subscriber::ResolveMethod
  def self.call(name, prefix); end
end
class WisperNext::Subscriber::NoMethodError < StandardError
  def initialize(event_name); end
end
class WisperNext::Events
  def broadcast(name, payload = nil); end
  include Anonymous_WisperNext_Publisher_5
  include WisperNext::Publisher::Methods
end
module Anonymous_WisperNext_Publisher_5
end
class WisperNext::Error < StandardError
end
